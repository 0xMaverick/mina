{{ range $config := $.Values.archive.archiveConfigs}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $config.name }}
  labels:
    app: {{ $config.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $config.name }}
  template:
    metadata:
      labels:
        app: {{ $config.name }}
        testnet: {{ $.Values.testnetName }}
        role: archive-node
        version: {{ trunc 6 (split ":" $.Values.coda.image)._1 | trimSuffix "-" }}
      annotations:
      {{- if $config.runLocalDaemon }}
        prometheus.io/scrape: 'true'
        prometheus.io/port: {{ $.Values.coda.ports.metrics | quote }}
        prometheus.io/path: '/metrics'
      {{- end }}
    spec:
      containers:
{{- if $config.runLocalDaemon }}
      - name: coda
        resources:
          limits:
          requests:
            memory: 8.0Gi
            cpu: 4.0
        image: {{ $.Values.coda.image }}
        args: [ "daemon",
          "-log-level", {{ $.Values.coda.logLevel }},
          "-log-json",
          {{- if $.Values.coda.logSnarkWorkGossip }}
          "-log-snark-work-gossip", "true",
          {{- end -}}
          {{- range $.Values.coda.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end -}}
          {{- if $.Values.coda.enableFlooding }}
          "-enable-flooding true"
          {{- end -}}
          {{- if $.Values.coda.peerExchange }}
          "-peer-exchange true"
          {{- end -}}
          {{- range $.Values.coda.directPeers }}
          "-direct-peers", {{ . | quote }},
          {{- end -}}
          "-config-directory", "/root/.coda-config",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-insecure-rest-server",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-archive-address", "$(DAEMON_ARCHIVE_PORT)",
          {{- if $.Values.coda.runtimeConfig }}
          "-config-file", "/config/daemon.json",
          {{- end -}}
          "-generate-genesis-proof", {{ $.Values.coda.generateGenesisProof | quote }}
        ]
        env:
        - name: DAEMON_REST_PORT
          value: {{ $.Values.coda.ports.graphql | quote }}
        - name: DAEMON_ARCHIVE_PORT
          value: {{ $config.serverPort | quote }}
        - name: DAEMON_CLIENT_PORT
          value: {{ $.Values.coda.ports.client | quote }}
        - name: DAEMON_METRICS_PORT
          value: {{ $.Values.coda.ports.metrics | quote }}
        - name: DAEMON_EXTERNAL_PORT
          value: {{ $.Values.coda.ports.p2p | quote }}
        - name: CODA_CLIENT_TRUSTLIST
          value: "10.0.0.0/8"
        - name: CONNECT_PRIVATE_IPS
          value: "true"
        ports:
        - name: client-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.client }}
        - name: graphql-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.graphql }}
        - name: metrics-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.metrics }}
        - name: external-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.p2p }}
          hostPort: {{ $.Values.coda.ports.p2p }}
{{- include "healthcheck.daemon.allChecks" $.Values | indent 8 }}
        imagePullPolicy: Always
        volumeMounts: 
        - name: config-dir
          mountPath: /root/.coda-config
        {{- if $.Values.coda.runtimeConfig }}
        - name: daemon-config
          mountPath: "/config/"
        {{- end }}
      {{- end }}
      # Archive Process
      - name: archive
        image: {{ $.Values.archive.image }}
        args: [ 
          "coda-archive",
          "run",
          "-postgres-uri", "{{ $config.postgresUri }}",
          {{- if $.Values.coda.runtimeConfig }}
          "-config-file", "/config/daemon.json",
          {{- end }}
          "-server-port", "{{ $config.serverPort }}"
        ]
        env:
        imagePullPolicy: Always
        {{- if $.Values.coda.runtimeConfig }}
        volumeMounts:
        - name: daemon-config
          mountPath: "/config/"
        {{- end }}
        ports:
        - name: archive-port
          protocol: TCP
          containerPort: {{ $config.serverPort }}
{{- include "healthcheck.archive.allChecks" $config | indent 8 }}
{{- include "nodeSelector.preemptible" $.Values | indent 6 }}
      volumes:
      - name: config-dir
        emptyDir: {}
      {{- if $.Values.coda.runtimeConfig }}
      - name: daemon-config
        configMap:
          name: "{{ $config.name }}-daemon-config"
      {{- end }}
{{ end }}